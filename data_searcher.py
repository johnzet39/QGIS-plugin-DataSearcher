# -*- coding: utf-8 -*-
"""
/***************************************************************************
 DataSearcher
                                 A QGIS plugin
 Search data by preset queries in json
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-08-11
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Zlatanov Evgeniy
        email                : johnzet@yandex.ru
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt, QVariant
from qgis.PyQt.QtGui import QIcon, QIntValidator, QDoubleValidator
from qgis.PyQt.QtWidgets import QAction
from qgis.PyQt import QtGui, QtWidgets, uic
from qgis.core import QgsProject, QgsVectorLayer, QgsRelation
from qgsdatetimeedit import QgsDateTimeEdit
# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the DockWidget
from .data_searcher_dockwidget import DataSearcherDockWidget
import os.path
import json


class DataSearcher:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.
    
        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'DataSearcher_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Data Searcher')

        self.toolbar = self.iface.addToolBar(u'DataSearcher')
        self.toolbar.setObjectName(u'DataSearcher')

        #print "** INITIALIZING DataSearcher"

        self.pluginIsActive = False
        self.dockwidget = None

        self.settings = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('DataSearcher', message)

    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/_Data_searcher/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Data searcher'),
            callback=self.run,
            parent=self.iface.mainWindow())

    #--------------------------------------------------------------------------

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        #print "** CLOSING DataSearcher"

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)

        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        # self.dockwidget = None

        self.pluginIsActive = False

        self.disconnectActions()

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        #print "** UNLOAD DataSearcher"

        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Data Searcher'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    #--------------------------------------------------------------------------

    def run(self):
        """Run method that loads and starts the plugin"""

        if not self.pluginIsActive:
            self.pluginIsActive = True

            #print "** STARTING DataSearcher"

            # dockwidget may not exist if:
            #    first run of plugin
            #    removed on close (see self.onClosePlugin method)
            if self.dockwidget == None:
                # Create the dockwidget (after translation) and keep reference
                self.dockwidget = DataSearcherDockWidget()
            self.connectActions()

            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)


            self.loadLayersData()
            self.populateComboLayers()
            # show the dockwidget
            # TODO: fix to allow choice of dock location
            self.iface.addDockWidget(Qt.BottomDockWidgetArea, self.dockwidget)
            self.dockwidget.show()

    def connectActions(self):
        self.dockwidget.pushButton_toMap.clicked.connect(self.button_click)
        #self.dockwidget.combo_layers.currentIndexChanged.connect(self.comboLayersChanged) #move to populateComboLayers
        print("connect")

    def disconnectActions(self):
        self.dockwidget.pushButton_toMap.clicked.disconnect(self.button_click)
        self.dockwidget.combo_layers.currentIndexChanged.disconnect(self.comboLayersChanged)
        print('disconnect')

    def loadLayersData(self):
        with open(os.path.join(self.plugin_dir, "settings.json"), "r") as read_file:
            self.settings = json.load(read_file)

            for layer in self.settings["Layers"].keys():
                self.dockwidget.combo_layers.addItem(layer)

    def comboLayersChanged(self):
        print("comboLayersChanged..")
        self.populateFilterFields()
        
    def populateFilterFields(self):
        self.clearFieldsLayout(self.dockwidget.fieldsLayout)

        dockWidgetContents = QtWidgets.QWidget()
        sellayer = self.dockwidget.combo_layers.currentText()
        ava_fields = self.settings["Layers"][sellayer]["fields"]
        cnt = len(ava_fields)
        med_cnt = (len(ava_fields))/2
        rmed_cnt = int(med_cnt + (0.5 if med_cnt > 0 else -0.5))

        #print (dict(list(ava_fields.items())[:rmed_cnt]))

        for index, num in enumerate(range(0, rmed_cnt)):
            field_name = list(ava_fields)[num]
            self.addWidget(index, field_name, ava_fields[field_name], 0, dockWidgetContents)
        for index, num in enumerate(range(rmed_cnt, cnt)):
            field_name = list(ava_fields)[num]
            self.addWidget(index, field_name, ava_fields[field_name], 2, dockWidgetContents)
    
    def addWidget(self, index, field_name, field, column_num, content):
        label = QtWidgets.QLabel(content)
        label.setObjectName("label_"+str(index)+'_'+str(column_num)) 
        label.setText(field["label"])
        self.dockwidget.fieldsLayout.addWidget(label, index, column_num, 1, 1)

        isrange = field.get("isrange", False) == 'True'

        if not isrange:
            widget = self.constructWidget(field_name, field, content)
            if widget:
                widget.setObjectName(field_name) 
                self.dockwidget.fieldsLayout.addWidget(widget, index, column_num + 1, 1, 1)
        else:
            targetLayout = QtWidgets.QHBoxLayout()
            targetLayout.setObjectName("HL" + field_name)
            widget_from = self.constructWidget(field_name, field, content)
            widget_from.setObjectName(field_name + '_from') 
            widget_to = self.constructWidget(field_name, field, content)
            widget_to.setObjectName(field_name + '_to') 
            targetLayout.addWidget(widget_from)
            targetLayout.addWidget(widget_to)
            self.dockwidget.fieldsLayout.addLayout(targetLayout, index, column_num + 1, 1, 1)
        
    
    def constructWidget(self, field_name, field, content):
        widget = None
        if field["source"] == "layer":
            widget = self.createWidgetByLayerField(field_name, content)
        else:
            widget = QtWidgets.QLineEdit(content)
        return widget


    def createWidgetByLayerField(self, field_name, content):
        layer = self.dockwidget.combo_layers.currentLayer()
        idx_field = layer.fields().indexFromName(field_name)
        type_field = layer.editorWidgetSetup(idx_field).type()

        if type_field == 'ValueMap':
            comboBox = QtWidgets.QComboBox(content)
            comboBox.setEditable(True)
            comboBox.setSizeAdjustPolicy(2) # AdjustToMinimumContentsLengthWithIcon = 2
            # comboBox.setObjectName(field_name) 
            valuemap = layer.editorWidgetSetup(idx_field).config()['map']
            for item in valuemap:
                first_key = list(item.keys())[0]
                comboBox.addItem(first_key, QVariant(item[first_key]))
            comboBox.setCurrentIndex(-1)
            return comboBox
        elif type_field == 'ValueRelation':
            comboBox = QtWidgets.QComboBox(content)
            comboBox.setEditable(True)
            comboBox.setSizeAdjustPolicy(2) # AdjustToMinimumContentsLengthWithIcon = 2
            # comboBox.setObjectName(field_name) 
            config = layer.editorWidgetSetup(idx_field).config()
            layer = QgsProject.instance().mapLayers()[config["Layer"]]
            for feat in layer.getFeatures():
                comboBox.addItem(feat[config["Value"]], QVariant(feat[config["Key"]]))
            comboBox.setCurrentIndex(-1)
            return comboBox
        elif type_field == 'RelationReference':
            comboBox = QtWidgets.QComboBox(content)
            comboBox.setEditable(True)
            comboBox.setSizeAdjustPolicy(2) # AdjustToMinimumContentsLengthWithIcon = 2
            # comboBox.setObjectName(field_name)
            config = layer.editorWidgetSetup(idx_field).config()
            configRelation = config['Relation']
            relation = QgsProject.instance().relationManager().relation(configRelation)
            relLayer = relation.referencedLayer()
            relLayerKey = relation.fieldPairs()[field_name]
            for feat in relLayer.getFeatures():
                try:
                    comboBox.addItem((feat[relLayer.displayExpression()]).strip(), QVariant(feat[relLayerKey]))
                except Exception as e:
                    pass
            comboBox.setCurrentIndex(-1)
            return comboBox
        elif type_field == 'CheckBox':
            checkBox = QtWidgets.QCheckBox(content)
            # checkBox.setObjectName(field_name)
            config = layer.editorWidgetSetup(idx_field).config()
            # checkedState = config["CheckedState"]
            # uncheckedState = config["UncheckedState"]
            return checkBox
        elif type_field == 'Range':
            config = layer.editorWidgetSetup(idx_field).config()
            lineEdit = QtWidgets.QLineEdit(content)
            # lineEdit.setObjectName(field_name) 
            if type(config["Step"]) == int:
                lineEdit.setValidator(QIntValidator(config["Min"], config["Max"], None))
            else:
                lineEdit.setValidator(QDoubleValidator(config["Min"], config["Max"], config["Precision"], None))
            return lineEdit
        elif type_field == 'DateTime':
            dateTimeEdit = QgsDateTimeEdit(content)
            # dateTimeEdit.setObjectName(field_name)
            dateTimeEdit.setAllowNull(True)
            dateTimeEdit.clear()
            return dateTimeEdit

        defaultLineEdit = QtWidgets.QLineEdit(content)
        # defaultLineEdit.setObjectName(field_name) 
        return defaultLineEdit

    def clearFieldsLayout(self, layout):
        print("clear..")
        print('count before: ', layout.objectName(), layout.count())
  
        for i in reversed(range(layout.count())): 
            if layout.itemAt(i).layout():
                self.clearFieldsLayout(layout.itemAt(i).layout())
                layout.itemAt(i).layout().setParent(None)
            elif layout.itemAt(i).widget():
                layout.itemAt(i).widget().setParent(None)
            
        print('count after: ', self.dockwidget.fieldsLayout.count())

    def populateComboLayers(self):
        available_layers = self.settings["Layers"].keys()
        layer_list = []
        for layer in QgsProject.instance().mapLayers().values():
            if layer.name() not in available_layers:
                layer_list.append(layer)
        self.dockwidget.combo_layers.setExceptedLayerList(layer_list)

        curlayer = self.iface.activeLayer()
        if curlayer is not None:
            if curlayer.name() in available_layers:
                self.dockwidget.combo_layers.setCurrentText(curlayer.name())
        self.populateFilterFields()

        self.dockwidget.combo_layers.currentIndexChanged.connect(self.comboLayersChanged)
        # print('populated')

    def button_click(self):
        print('aa')